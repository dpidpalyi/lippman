The reason is in the number of copying that needs to be made: binary operator + creates and returns a new object that represents a sum, while the compound addition-assignment operator modifies the object in place.

If you would like to implement the compound operator in terms of the binary operator, the sequence of actions would be as follows:

    Compound assignment calls the binary operator
    The binary operator creates a new object from one of the objects (copy #1), and puts the sum into it
    The sum is returned by value (copy #2)
    The sum object is copied into the object on the left-hand side object (copy #3)

If you do it the other way around, the last copy is eliminated:

    Binary operator creates an object representing the sum from the left-hand side object
    Binary operator invokes the compound addition-assignment, which does not require copying
    Binary operator returns the object by value (copy #2)

Therefore, using the compound addition-assignment in the implementation of the binary + is more efficient.
